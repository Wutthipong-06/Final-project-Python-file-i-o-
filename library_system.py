#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î (Library Management System)
‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡∏î‡∏π‡∏• struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""

import struct
import os
import datetime
import textwrap
from typing import List, Dict, Optional, Tuple

class LibrarySystem:
    def __init__(self):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ struct format
        # ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: id(4), title(100), author(50), isbn(20), year(4), status(1), deleted(1)
        self.book_format = '4s100s50s20s4s1s1s'
        self.book_size = struct.calcsize(self.book_format)
        
        # ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: id(4), name(50), email(50), phone(15), join_date(10), status(1), deleted(1), ban_until(10)
        self.member_format = '4s50s50s15s10s1s1s10s'
        self.member_size = struct.calcsize(self.member_format)
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: id(4), book_id(4), member_id(4), borrow_date(10), return_date(10), due_date(10), status(1), deleted(1)
        self.borrow_format = '4s4s4s10s10s10s1s1s'
        self.borrow_size = struct.calcsize(self.borrow_format)
        
        # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        self.BORROW_DAYS = 7  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°
        self.BAN_DAYS = 30  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Ban
        
        # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        self.books_file = 'books.dat'
        self.members_file = 'members.dat'
        self.borrows_file = 'borrows.dat'
        self.report_file = 'library_report.txt'
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        self._initialize_files()
        
        # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.operation_history = []

    def _initialize_files(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        for filename in [self.books_file, self.members_file, self.borrows_file]:
            if not os.path.exists(filename):
                open(filename, 'wb').close()

    def _get_next_id(self, filename: str, record_size: int) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        if not os.path.exists(filename) or os.path.getsize(filename) == 0:
            return "0001"
        
        with open(filename, 'rb') as f:
            f.seek(-record_size, 2)  # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            last_record = f.read(record_size)
            
        if filename == self.books_file:
            last_id = struct.unpack(self.book_format, last_record)[0]
        elif filename == self.members_file:
            last_id = struct.unpack(self.member_format, last_record)[0]
        else:
            last_id = struct.unpack(self.borrow_format, last_record)[0]
            
        last_id_num = int(last_id.decode('utf-8').strip('\x00'))
        return f"{last_id_num + 1:04d}"

    def _encode_string(self, text: str, length: int) -> bytes:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        return text.encode('utf-8')[:length].ljust(length, b'\x00')

    def _decode_string(self, data: bytes) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á bytes ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á"""
        return data.decode('utf-8').rstrip('\x00')

    # === BOOKS MANAGEMENT ===
    def add_book(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        print("\n=== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===")
        try:
            title = input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ").strip()
            if not title:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
                return
                
            author = input("‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: ").strip()
            if not author:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á")
                return
                
            isbn = input("ISBN: ").strip()
            year_str = input("‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå: ").strip()
            
            try:
                year = int(year_str)
                if year < 1000 or year > 9999:
                    raise ValueError()
            except ValueError:
                print("‚ùå ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å")
                return

            book_id = self._get_next_id(self.books_file, self.book_size)
            
            # pack ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
            book_data = struct.pack(
                self.book_format,
                self._encode_string(book_id, 4),
                self._encode_string(title, 100),
                self._encode_string(author, 50),
                self._encode_string(isbn, 20),
                self._encode_string(str(year), 4),
                b'A',  # Active
                b'0'   # Not deleted
            )
            
            with open(self.books_file, 'ab') as f:
                f.write(book_data)
            
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ID: {book_id}")
            self.operation_history.append(f"{datetime.datetime.now()}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ '{title}' ID: {book_id}")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def view_books(self):
        """‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        print("\n=== ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===")
        print("1. ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
        print("2. ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("3. ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á")
        
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-3): ").strip()
        
        if choice == '1':
            self._view_single_book()
        elif choice == '2':
            self._view_all_books()
        elif choice == '3':
            self._view_filtered_books()

    def _view_single_book(self):
        """‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        book_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ").strip()
        book = self._find_book_by_id(book_id)
        
        if book:
            self._display_book(book)
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")

    def _view_all_books(self):
        """‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        books = self._get_all_books()
        active_books = [book for book in books if book[6] == b'0']  # ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
        
        if not active_books:
            print("üìö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        print(f"\nüìö ‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(active_books)} ‡πÄ‡∏•‡πà‡∏°")
        print("-" * 80)
        
        for book in active_books:
            self._display_book(book, compact=True)

    def _view_filtered_books(self):
        """‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á"""
        print("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°:")
        print("1. ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
        print("2. ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á")
        print("3. ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå")
        
        filter_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-3): ").strip()
        keyword = input("‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ").strip().lower()
        
        books = self._get_all_books()
        active_books = [book for book in books if book[6] == b'0']
        filtered_books = []
        
        for book in active_books:
            if filter_choice == '1' and keyword in self._decode_string(book[1]).lower():
                filtered_books.append(book)
            elif filter_choice == '2' and keyword in self._decode_string(book[2]).lower():
                filtered_books.append(book)
            elif filter_choice == '3' and keyword in self._decode_string(book[4]):
                filtered_books.append(book)
        
        if filtered_books:
            print(f"\nüìö ‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ {len(filtered_books)} ‡πÄ‡∏•‡πà‡∏°")
            print("-" * 80)
            for book in filtered_books:
                self._display_book(book, compact=True)
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

    def _find_book_by_id(self, book_id: str):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏≤‡∏Å ID"""
        books = self._get_all_books()
        for book in books:
            if self._decode_string(book[0]) == book_id and book[6] == b'0':
                return book
        return None

    def _get_all_books(self) -> List:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        books = []
        if not os.path.exists(self.books_file):
            return books
            
        with open(self.books_file, 'rb') as f:
            while True:
                data = f.read(self.book_size)
                if not data:
                    break
                book = struct.unpack(self.book_format, data)
                books.append(book)
        return books

    def _display_book(self, book, compact=False):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        book_id = self._decode_string(book[0])
        title = self._decode_string(book[1])
        author = self._decode_string(book[2])
        isbn = self._decode_string(book[3])
        year = self._decode_string(book[4])
        status = '‡∏ß‡πà‡∏≤‡∏á' if book[5] == b'A' else '‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°'
        
        if compact:
            print(f"ID: {book_id} | {title[:30]:<30} | {author[:20]:<20} | {status}")
        else:
            print(f"ID: {book_id}")
            print(f"‡∏ä‡∏∑‡πà‡∏≠: {title}")
            print(f"‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: {author}")
            print(f"ISBN: {isbn}")
            print(f"‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå: {year}")
            print(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}")
            print("-" * 50)

    def update_book(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        print("\n=== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===")
        book_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
        
        book_index = self._find_book_index_by_id(book_id)
        if book_index == -1:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
            return
        
        book = self._get_book_by_index(book_index)
        if not book:
            print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
        self._display_book(book)
        
        print("\n‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°):")
        
        title = input(f"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ [{self._decode_string(book[1])}]: ").strip()
        if not title:
            title = self._decode_string(book[1])
            
        author = input(f"‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á [{self._decode_string(book[2])}]: ").strip()
        if not author:
            author = self._decode_string(book[2])
            
        isbn = input(f"ISBN [{self._decode_string(book[3])}]: ").strip()
        if not isbn:
            isbn = self._decode_string(book[3])
            
        year_input = input(f"‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå [{self._decode_string(book[4])}]: ").strip()
        if year_input:
            try:
                year = int(year_input)
                if year < 1000 or year > 9999:
                    raise ValueError()
            except ValueError:
                print("‚ùå ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å")
                return
        else:
            year = int(self._decode_string(book[4]))
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        updated_book = struct.pack(
            self.book_format,
            book[0],  # ID ‡πÄ‡∏î‡∏¥‡∏°
            self._encode_string(title, 100),
            self._encode_string(author, 50),
            self._encode_string(isbn, 20),
            self._encode_string(str(year), 4),
            book[5],  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
            book[6]   # deleted flag ‡πÄ‡∏î‡∏¥‡∏°
        )
        
        self._update_record(self.books_file, book_index, updated_book, self.book_size)
        print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        self.operation_history.append(f"{datetime.datetime.now()}: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id}")

    def delete_book(self):
        """‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        print("\n=== ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===")
        book_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
        
        book_index = self._find_book_index_by_id(book_id)
        if book_index == -1:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
            return
        
        book = self._get_book_by_index(book_index)
        if not book:
            print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:")
        self._display_book(book)
        
        confirm = input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ deleted flag
        deleted_book = struct.pack(
            self.book_format,
            book[0], book[1], book[2], book[3], book[4], book[5],
            b'1'  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ deleted = 1
        )
        
        self._update_record(self.books_file, book_index, deleted_book, self.book_size)
        print("‚úÖ ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        self.operation_history.append(f"{datetime.datetime.now()}: ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id}")

    def _find_book_index_by_id(self, book_id: str) -> int:
        """‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏≤‡∏Å ID"""
        if not os.path.exists(self.books_file):
            return -1
            
        with open(self.books_file, 'rb') as f:
            index = 0
            while True:
                data = f.read(self.book_size)
                if not data:
                    break
                book = struct.unpack(self.book_format, data)
                if self._decode_string(book[0]) == book_id and book[6] == b'0':
                    return index
                index += 1
        return -1

    def _get_book_by_index(self, index: int):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏≤‡∏Å index"""
        if not os.path.exists(self.books_file):
            return None
            
        with open(self.books_file, 'rb') as f:
            f.seek(index * self.book_size)
            data = f.read(self.book_size)
            if not data:
                return None
            return struct.unpack(self.book_format, data)

    def _update_record(self, filename: str, index: int, data: bytes, record_size: int):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
        with open(filename, 'r+b') as f:
            f.seek(index * record_size)
            f.write(data)

    # === MEMBERS MANAGEMENT ===
    def add_member(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        print("\n=== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===")
        try:
            name = input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ").strip()
            if not name:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
                return
                
            email = input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ").strip()
            phone = input("‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ").strip()
            
            member_id = self._get_next_id(self.members_file, self.member_size)
            join_date = datetime.date.today().strftime("%Y-%m-%d")
            
            member_data = struct.pack(
                self.member_format,
                self._encode_string(member_id, 4),
                self._encode_string(name, 50),
                self._encode_string(email, 50),
                self._encode_string(phone, 15),
                self._encode_string(join_date, 10),
                b'A',  # Active
                b'0',  # Not deleted
                self._encode_string("", 10)  # ban_until (‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ban)
            )
            
            with open(self.members_file, 'ab') as f:
                f.write(member_data)
            
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ID: {member_id}")
            self.operation_history.append(f"{datetime.datetime.now()}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å '{name}' ID: {member_id}")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def view_members(self):
        """‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        print("\n=== ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===")
        print("1. ‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
        print("2. ‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("3. ‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á")
        
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-3): ").strip()
        
        if choice == '1':
            self._view_single_member()
        elif choice == '2':
            self._view_all_members()
        elif choice == '3':
            self._view_filtered_members()

    def _view_single_member(self):
        """‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        member_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").strip()
        member = self._find_member_by_id(member_id)
        
        if member:
            self._display_member(member)
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")

    def _view_all_members(self):
        """‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        members = self._get_all_members()
        active_members = [member for member in members if member[6] == b'0']
        
        if not active_members:
            print("üë• ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        print(f"\nüë• ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(active_members)} ‡∏Ñ‡∏ô")
        print("-" * 80)
        
        for member in active_members:
            self._display_member(member, compact=True)

    def _view_filtered_members(self):
        """‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á"""
        print("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°:")
        print("1. ‡∏ä‡∏∑‡πà‡∏≠")
        print("2. ‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
        
        filter_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-2): ").strip()
        keyword = input("‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ").strip().lower()
        
        members = self._get_all_members()
        active_members = [member for member in members if member[6] == b'0']
        filtered_members = []
        
        for member in active_members:
            if filter_choice == '1' and keyword in self._decode_string(member[1]).lower():
                filtered_members.append(member)
            elif filter_choice == '2' and keyword in self._decode_string(member[2]).lower():
                filtered_members.append(member)
        
        if filtered_members:
            print(f"\nüë• ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {len(filtered_members)} ‡∏Ñ‡∏ô")
            print("-" * 80)
            for member in filtered_members:
                self._display_member(member, compact=True)
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

    def _find_member_by_id(self, member_id: str):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å ID"""
        members = self._get_all_members()
        for member in members:
            if self._decode_string(member[0]) == member_id and member[6] == b'0':
                return member
        return None

    def _get_all_members(self) -> List:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        members = []
        if not os.path.exists(self.members_file):
            return members
            
        with open(self.members_file, 'rb') as f:
            while True:
                data = f.read(self.member_size)
                if not data:
                    break
                member = struct.unpack(self.member_format, data)
                members.append(member)
        return members

    def _display_member(self, member, compact=False):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        member_id = self._decode_string(member[0])
        name = self._decode_string(member[1])
        email = self._decode_string(member[2])
        phone = self._decode_string(member[3])
        join_date = self._decode_string(member[4])
        status = '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if member[5] == b'A' else '‡∏£‡∏∞‡∏á‡∏±‡∏ö'
        ban_until = self._decode_string(member[7])
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ban
        if ban_until:
            try:
                ban_date = datetime.datetime.strptime(ban_until, "%Y-%m-%d").date()
                today = datetime.date.today()
                if ban_date > today:
                    status = f'‡∏ñ‡∏π‡∏Å Ban ‡∏ñ‡∏∂‡∏á {ban_until}'
                else:
                    status = '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Ban ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)'
            except:
                pass
        
        if compact:
            print(f"ID: {member_id} | {name[:25]:<25} | {email[:30]:<30} | {status}")
        else:
            print(f"ID: {member_id}")
            print(f"‡∏ä‡∏∑‡πà‡∏≠: {name}")
            print(f"‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {email}")
            print(f"‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {phone}")
            print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: {join_date}")
            print(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}")
            if ban_until and datetime.datetime.strptime(ban_until, "%Y-%m-%d").date() > datetime.date.today():
                print(f"‚ö†Ô∏è ‡∏ñ‡∏π‡∏Å Ban ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á: {ban_until}")
            print("-" * 50)

    def update_member(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        print("\n=== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===")
        member_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
        
        member_index = self._find_member_index_by_id(member_id)
        if member_index == -1:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
            return
        
        member = self._get_member_by_index(member_index)
        if not member:
            print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
        self._display_member(member)
        
        print("\n‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°):")
        
        name = input(f"‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• [{self._decode_string(member[1])}]: ").strip()
        if not name:
            name = self._decode_string(member[1])
            
        email = input(f"‡∏≠‡∏µ‡πÄ‡∏°‡∏• [{self._decode_string(member[2])}]: ").strip()
        if not email:
            email = self._decode_string(member[2])
            
        phone = input(f"‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå [{self._decode_string(member[3])}]: ").strip()
        if not phone:
            phone = self._decode_string(member[3])
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        updated_member = struct.pack(
            self.member_format,
            member[0],  # ID ‡πÄ‡∏î‡∏¥‡∏°
            self._encode_string(name, 50),
            self._encode_string(email, 50),
            self._encode_string(phone, 15),
            member[4],  # join_date ‡πÄ‡∏î‡∏¥‡∏°
            member[5],  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
            member[6],  # deleted flag ‡πÄ‡∏î‡∏¥‡∏°
            member[7]   # ban_until ‡πÄ‡∏î‡∏¥‡∏°
        )
        
        self._update_record(self.members_file, member_index, updated_member, self.member_size)
        print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        self.operation_history.append(f"{datetime.datetime.now()}: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID: {member_id}")

    def delete_member(self):
        """‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        print("\n=== ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ===")
        member_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
        
        member_index = self._find_member_index_by_id(member_id)
        if member_index == -1:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
            return
        
        member = self._get_member_by_index(member_index)
        if not member:
            print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:")
        self._display_member(member)
        
        confirm = input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ deleted flag
        deleted_member = struct.pack(
            self.member_format,
            member[0], member[1], member[2], member[3], member[4], member[5],
            b'1',      # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ deleted = 1
            member[7]  # ban_until ‡πÄ‡∏î‡∏¥‡∏°
        )
        
        self._update_record(self.members_file, member_index, deleted_member, self.member_size)
        print("‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        self.operation_history.append(f"{datetime.datetime.now()}: ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID: {member_id}")

    def _find_member_index_by_id(self, member_id: str) -> int:
        """‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å ID"""
        if not os.path.exists(self.members_file):
            return -1
            
        with open(self.members_file, 'rb') as f:
            index = 0
            while True:
                data = f.read(self.member_size)
                if not data:
                    break
                member = struct.unpack(self.member_format, data)
                if self._decode_string(member[0]) == member_id and member[6] == b'0':
                    return index
                index += 1
        return -1

    def _get_member_by_index(self, index: int):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å index"""
        if not os.path.exists(self.members_file):
            return None
            
        with open(self.members_file, 'rb') as f:
            f.seek(index * self.member_size)
            data = f.read(self.member_size)
            if not data:
                return None
            return struct.unpack(self.member_format, data)

    # === BORROW MANAGEMENT ===
    def add_borrow(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°"""
        print("\n=== ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===")
        try:
            book_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ").strip()
            member_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").strip()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ß‡πà‡∏≤‡∏á
            book = self._find_book_by_id(book_id)
            if not book:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
                return
            if book[5] != b'A':  # ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                print("‚ùå ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å Ban
            member = self._find_member_by_id(member_id)
            if not member:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ban
            ban_until = self._decode_string(member[7])
            if ban_until:
                try:
                    ban_date = datetime.datetime.strptime(ban_until, "%Y-%m-%d").date()
                    today = datetime.date.today()
                    if ban_date > today:
                        print(f"‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å Ban ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á {ban_until}")
                        print(f"   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {(ban_date - today).days} ‡∏ß‡∏±‡∏ô")
                        return
                    else:
                        # Ban ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á ban_until
                        self._clear_member_ban(member_id)
                except:
                    pass
            
            borrow_id = self._get_next_id(self.borrows_file, self.borrow_size)
            borrow_date = datetime.date.today()
            due_date = borrow_date + datetime.timedelta(days=self.BORROW_DAYS)
            
            borrow_date_str = borrow_date.strftime("%Y-%m-%d")
            due_date_str = due_date.strftime("%Y-%m-%d")
            
            borrow_data = struct.pack(
                self.borrow_format,
                self._encode_string(borrow_id, 4),
                self._encode_string(book_id, 4),
                self._encode_string(member_id, 4),
                self._encode_string(borrow_date_str, 10),
                self._encode_string("", 10),  # return_date ‡∏ß‡πà‡∏≤‡∏á
                self._encode_string(due_date_str, 10),  # due_date
                b'B',  # Borrowed
                b'0'   # Not deleted
            )
            
            with open(self.borrows_file, 'ab') as f:
                f.write(borrow_data)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô '‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°'
            self._update_book_status(book_id, b'B')
            
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ID: {borrow_id}")
            print(f"‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: {self._decode_string(book[1])}")
            print(f"‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: {self._decode_string(member[1])}")
            print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: {borrow_date_str}")
            print(f"üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: {due_date_str} ({self.BORROW_DAYS} ‡∏ß‡∏±‡∏ô)")
            print(f"‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å Ban {self.BAN_DAYS} ‡∏ß‡∏±‡∏ô")
            
            self.operation_history.append(f"{datetime.datetime.now()}: ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id} ‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID: {member_id}, ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: {due_date_str}")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def return_book(self):
        """‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        print("\n=== ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ===")
        try:
            book_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô: ").strip()
            
            # ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô
            borrow_record = self._find_active_borrow_by_book_id(book_id)
            if not borrow_record:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                return
            
            borrow_index, borrow_data = borrow_record
            return_date = datetime.date.today()
            return_date_str = return_date.strftime("%Y-%m-%d")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            due_date_str = self._decode_string(borrow_data[5])
            borrow_date_str = self._decode_string(borrow_data[3])
            member_id = self._decode_string(borrow_data[2])
            
            is_late = False
            days_late = 0
            
            try:
                due_date = datetime.datetime.strptime(due_date_str, "%Y-%m-%d").date()
                if return_date > due_date:
                    is_late = True
                    days_late = (return_date - due_date).days
            except:
                pass
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
            updated_borrow = struct.pack(
                self.borrow_format,
                borrow_data[0],  # borrow_id
                borrow_data[1],  # book_id
                borrow_data[2],  # member_id
                borrow_data[3],  # borrow_date
                self._encode_string(return_date_str, 10),  # return_date
                borrow_data[5],  # due_date
                b'R',  # Returned
                borrow_data[7]   # deleted flag
            )
            
            self._update_record(self.borrows_file, borrow_index, updated_borrow, self.borrow_size)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô '‡∏ß‡πà‡∏≤‡∏á'
            self._update_book_status(book_id, b'A')
            
            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ä‡πâ‡∏≤ ‡πÉ‡∏´‡πâ Ban ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            if is_late:
                ban_until_date = return_date + datetime.timedelta(days=self.BAN_DAYS)
                self._ban_member(member_id, ban_until_date)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            book = self._find_book_by_id(book_id)
            member = self._find_member_by_id(member_id)
            
            print("‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            print(f"‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: {self._decode_string(book[1])}")
            print(f"‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: {self._decode_string(member[1])}")
            print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: {borrow_date_str}")
            print(f"‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: {due_date_str}")
            print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: {return_date_str}")
            
            if is_late:
                ban_until_str = ban_until_date.strftime("%Y-%m-%d")
                print(f"\n‚ö†Ô∏è ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î {days_late} ‡∏ß‡∏±‡∏ô!")
                print(f"üö´ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å Ban ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á: {ban_until_str} ({self.BAN_DAYS} ‡∏ß‡∏±‡∏ô)")
                self.operation_history.append(f"{datetime.datetime.now()}: ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id} (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î {days_late} ‡∏ß‡∏±‡∏ô) - Ban ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID: {member_id} ‡∏ñ‡∏∂‡∏á {ban_until_str}")
            else:
                print(f"\n‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
                self.operation_history.append(f"{datetime.datetime.now()}: ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id}")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def view_borrows(self):
        """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°"""
        print("\n=== ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° ===")
        print("1. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
        print("2. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("3. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô")
        print("4. ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): ").strip()
        
        if choice == '1':
            self._view_single_borrow()
        elif choice == '2':
            self._view_all_borrows()
        elif choice == '3':
            self._view_active_borrows()
        elif choice == '4':
            self._view_member_borrow_history()

    def _view_single_borrow(self):
        """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        borrow_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: ").strip()
        borrow = self._find_borrow_by_id(borrow_id)
        
        if borrow:
            self._display_borrow(borrow)
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")

    def _view_all_borrows(self):
        """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        borrows = self._get_all_borrows()
        active_borrows = [borrow for borrow in borrows if borrow[6] == b'0']
        
        if not active_borrows:
            print("üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        print(f"\nüìã ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(active_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print("-" * 100)
        
        for borrow in active_borrows:
            self._display_borrow(borrow, compact=True)

    def _view_active_borrows(self):
        """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô"""
        borrows = self._get_all_borrows()
        active_borrows = [borrow for borrow in borrows if borrow[5] == b'B' and borrow[6] == b'0']
        
        if not active_borrows:
            print("üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà")
            return
        
        print(f"\nüìã ‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà {len(active_borrows)} ‡πÄ‡∏•‡πà‡∏°")
        print("-" * 100)
        
        for borrow in active_borrows:
            self._display_borrow(borrow, compact=True)

    def _view_member_borrow_history(self):
        """‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        member_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").strip()
        
        member = self._find_member_by_id(member_id)
        if not member:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
            return
        
        borrows = self._get_all_borrows()
        member_borrows = [borrow for borrow in borrows 
                         if self._decode_string(borrow[2]) == member_id and borrow[6] == b'0']
        
        if not member_borrows:
            print("üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")
            return
        
        print(f"\nüìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á: {self._decode_string(member[1])}")
        print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(member_borrows)}")
        print("-" * 100)
        
        for borrow in member_borrows:
            self._display_borrow(borrow, compact=True)

    def _find_borrow_by_id(self, borrow_id: str):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏à‡∏≤‡∏Å ID"""
        borrows = self._get_all_borrows()
        for borrow in borrows:
            if self._decode_string(borrow[0]) == borrow_id and borrow[6] == b'0':
                return borrow
        return None

    def _find_active_borrow_by_book_id(self, book_id: str):
        """‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å book_id"""
        if not os.path.exists(self.borrows_file):
            return None
            
        with open(self.borrows_file, 'rb') as f:
            index = 0
            while True:
                data = f.read(self.borrow_size)
                if not data:
                    break
                borrow = struct.unpack(self.borrow_format, data)
                if (self._decode_string(borrow[1]) == book_id and 
                    borrow[6] == b'B' and borrow[7] == b'0'):  # Borrowed ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
                    return (index, borrow)
                index += 1
        return None

    def _ban_member(self, member_id: str, ban_until_date):
        """Ban ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        member_index = self._find_member_index_by_id(member_id)
        if member_index == -1:
            return
        
        member = self._get_member_by_index(member_index)
        if not member:
            return
        
        ban_until_str = ban_until_date.strftime("%Y-%m-%d")
        
        updated_member = struct.pack(
            self.member_format,
            member[0],  # ID
            member[1],  # name
            member[2],  # email
            member[3],  # phone
            member[4],  # join_date
            member[5],  # status
            member[6],  # deleted
            self._encode_string(ban_until_str, 10)  # ban_until
        )
        
        self._update_record(self.members_file, member_index, updated_member, self.member_size)

    def _clear_member_ban(self, member_id: str):
        """‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ban ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        member_index = self._find_member_index_by_id(member_id)
        if member_index == -1:
            return
        
        member = self._get_member_by_index(member_index)
        if not member:
            return
        
        updated_member = struct.pack(
            self.member_format,
            member[0],  # ID
            member[1],  # name
            member[2],  # email
            member[3],  # phone
            member[4],  # join_date
            member[5],  # status
            member[6],  # deleted
            self._encode_string("", 10)  # ‡∏•‡πâ‡∏≤‡∏á ban_until
        )
        
        self._update_record(self.members_file, member_index, updated_member, self.member_size)

    def _get_all_borrows(self) -> List:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        borrows = []
        if not os.path.exists(self.borrows_file):
            return borrows
            
        with open(self.borrows_file, 'rb') as f:
            while True:
                data = f.read(self.borrow_size)
                if not data:
                    break
                borrow = struct.unpack(self.borrow_format, data)
                borrows.append(borrow)
        return borrows

    def _display_borrow(self, borrow, compact=False):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°"""
        borrow_id = self._decode_string(borrow[0])
        book_id = self._decode_string(borrow[1])
        member_id = self._decode_string(borrow[2])
        borrow_date = self._decode_string(borrow[3])
        return_date = self._decode_string(borrow[4]) or "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô"
        due_date = self._decode_string(borrow[5])
        status = "‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà" if borrow[6] == b'B' else "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        is_overdue = False
        days_overdue = 0
        if borrow[6] == b'B' and due_date:  # ‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà
            try:
                due_dt = datetime.datetime.strptime(due_date, "%Y-%m-%d").date()
                today = datetime.date.today()
                if today > due_dt:
                    is_overdue = True
                    days_overdue = (today - due_dt).days
                    status = f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î {days_overdue} ‡∏ß‡∏±‡∏ô"
            except:
                pass
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        book = self._find_book_by_id(book_id)
        member = self._find_member_by_id(member_id)
        
        book_title = self._decode_string(book[1]) if book else f"‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id}"
        member_name = self._decode_string(member[1]) if member else f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID: {member_id}"
        
        if compact:
            status_display = status[:30] if not is_overdue else f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô {days_overdue}‡∏ß‡∏±‡∏ô"
            print(f"ID: {borrow_id} | {book_title[:30]:<30} | {member_name[:20]:<20} | {borrow_date} | {status_display}")
        else:
            print(f"‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: {borrow_id}")
            print(f"‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: {book_title}")
            print(f"‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: {member_name}")
            print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: {borrow_date}")
            print(f"‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: {due_date}")
            print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: {return_date}")
            print(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status}")
            if is_overdue:
                print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {days_overdue} ‡∏ß‡∏±‡∏ô!")
            print("-" * 50)

    def _update_book_status(self, book_id: str, status: bytes):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        book_index = self._find_book_index_by_id(book_id)
        if book_index == -1:
            return
        
        book = self._get_book_by_index(book_index)
        if not book:
            return
        
        updated_book = struct.pack(
            self.book_format,
            book[0], book[1], book[2], book[3], book[4],
            status,  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            book[6]
        )
        
        self._update_record(self.books_file, book_index, updated_book, self.book_size)

    def delete_borrow(self):
        """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°"""
        print("\n=== ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° ===")
        borrow_id = input("‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
        
        borrow_index = self._find_borrow_index_by_id(borrow_id)
        if borrow_index == -1:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")
            return
        
        borrow = self._get_borrow_by_index(borrow_index)
        if not borrow:
            print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        print("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:")
        self._display_borrow(borrow)
        
        confirm = input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return
        
        # ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
        if borrow[6] == b'B':
            book_id = self._decode_string(borrow[1])
            self._update_book_status(book_id, b'A')
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ deleted flag
        deleted_borrow = struct.pack(
            self.borrow_format,
            borrow[0], borrow[1], borrow[2], borrow[3], borrow[4], borrow[5], borrow[6],
            b'1'  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ deleted = 1
        )
        
        self._update_record(self.borrows_file, borrow_index, deleted_borrow, self.borrow_size)
        print("‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        self.operation_history.append(f"{datetime.datetime.now()}: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° ID: {borrow_id}")

    def check_overdue_books(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô"""
        print("\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ===")
        
        borrows = self._get_all_borrows()
        active_borrows = [borrow for borrow in borrows if borrow[6] == b'B' and borrow[7] == b'0']
        
        overdue_list = []
        today = datetime.date.today()
        
        for borrow in active_borrows:
            due_date_str = self._decode_string(borrow[5])
            if due_date_str:
                try:
                    due_date = datetime.datetime.strptime(due_date_str, "%Y-%m-%d").date()
                    if today > due_date:
                        days_overdue = (today - due_date).days
                        overdue_list.append((borrow, days_overdue))
                except:
                    pass
        
        if not overdue_list:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô")
            return
        
        print(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î {len(overdue_list)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print("-" * 100)
        
        for borrow, days_overdue in sorted(overdue_list, key=lambda x: x[1], reverse=True):
            book_id = self._decode_string(borrow[1])
            member_id = self._decode_string(borrow[2])
            borrow_date = self._decode_string(borrow[3])
            due_date = self._decode_string(borrow[5])
            
            book = self._find_book_by_id(book_id)
            member = self._find_member_by_id(member_id)
            
            book_title = self._decode_string(book[1]) if book else f"‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ID: {book_id}"
            member_name = self._decode_string(member[1]) if member else f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ID: {member_id}"
            
            print(f"üìö ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: {book_title[:40]}")
            print(f"   ‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°: {member_name} (ID: {member_id})")
            print(f"   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: {borrow_date} | ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: {due_date}")
            print(f"   ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: {days_overdue} ‡∏ß‡∏±‡∏ô")
            print("-" * 100)

    def _find_borrow_index_by_id(self, borrow_id: str) -> int:
        """‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏à‡∏≤‡∏Å ID"""
        if not os.path.exists(self.borrows_file):
            return -1
            
        with open(self.borrows_file, 'rb') as f:
            index = 0
            while True:
                data = f.read(self.borrow_size)
                if not data:
                    break
                borrow = struct.unpack(self.borrow_format, data)
                if self._decode_string(borrow[0]) == borrow_id and borrow[6] == b'0':
                    return index
                index += 1
        return -1

    def _get_borrow_by_index(self, index: int):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏à‡∏≤‡∏Å index"""
        if not os.path.exists(self.borrows_file):
            return None
            
        with open(self.borrows_file, 'rb') as f:
            f.seek(index * self.borrow_size)
            data = f.read(self.borrow_size)
            if not data:
                return None
            return struct.unpack(self.borrow_format, data)

    # === STATISTICS AND REPORTS ===
    def view_statistics(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ"""
        print("\n=== ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ ===")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
        books = self._get_all_books()
        active_books = [book for book in books if book[6] == b'0']
        available_books = [book for book in active_books if book[5] == b'A']
        borrowed_books = [book for book in active_books if book[5] == b'B']
        deleted_books = [book for book in books if book[6] == b'1']
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        members = self._get_all_members()
        active_members = [member for member in members if member[6] == b'0']
        deleted_members = [member for member in members if member[6] == b'1']
        
        # ‡∏ô‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Ban
        banned_members = []
        today = datetime.date.today()
        for member in active_members:
            ban_until = self._decode_string(member[7])
            if ban_until:
                try:
                    ban_date = datetime.datetime.strptime(ban_until, "%Y-%m-%d").date()
                    if ban_date > today:
                        banned_members.append(member)
                except:
                    pass
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
        borrows = self._get_all_borrows()
        active_borrows = [borrow for borrow in borrows if borrow[7] == b'0']
        current_borrows = [borrow for borrow in active_borrows if borrow[6] == b'B']
        returned_borrows = [borrow for borrow in active_borrows if borrow[6] == b'R']
        deleted_borrows = [borrow for borrow in borrows if borrow[7] == b'1']
        
        # ‡∏ô‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        overdue_count = 0
        for borrow in current_borrows:
            due_date_str = self._decode_string(borrow[5])
            if due_date_str:
                try:
                    due_date = datetime.datetime.strptime(due_date_str, "%Y-%m-%d").date()
                    if today > due_date:
                        overdue_count += 1
                except:
                    pass
        
        print("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠:")
        print(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(active_books)} ‡πÄ‡∏•‡πà‡∏°")
        print(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á: {len(available_books)} ‡πÄ‡∏•‡πà‡∏°")
        print(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°: {len(borrowed_books)} ‡πÄ‡∏•‡πà‡∏°")
        print(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö: {len(deleted_books)} ‡πÄ‡∏•‡πà‡∏°")
        
        print("\nüë• ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:")
        print(f"  - ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(active_members)} ‡∏Ñ‡∏ô")
        print(f"  - ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Ban: {len(banned_members)} ‡∏Ñ‡∏ô")
        print(f"  - ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö: {len(deleted_members)} ‡∏Ñ‡∏ô")
        
        print("\nüìã ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°:")
        print(f"  - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(active_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà: {len(current_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {overdue_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚ö†Ô∏è")
        print(f"  - ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {len(returned_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"  - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö: {len(deleted_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        print("\n‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö:")
        print(f"  - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏∑‡∏°: {self.BORROW_DAYS} ‡∏ß‡∏±‡∏ô")
        print(f"  - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ Ban: {self.BAN_DAYS} ‡∏ß‡∏±‡∏ô")

    def generate_report(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        print("\n=== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ===")
        
        try:
            report_content = []
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            report_content.append("=" * 80)
            report_content.append("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î")
            report_content.append("Library Management System Report")
            report_content.append("=" * 80)
            report_content.append(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {current_time}")
            report_content.append("-" * 80)
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            books = self._get_all_books()
            active_books = [book for book in books if book[6] == b'0']
            available_books = [book for book in active_books if book[5] == b'A']
            borrowed_books = [book for book in active_books if book[5] == b'B']
            deleted_books = [book for book in books if book[6] == b'1']
            
            members = self._get_all_members()
            active_members = [member for member in members if member[6] == b'0']
            deleted_members = [member for member in members if member[6] == b'1']
            
            borrows = self._get_all_borrows()
            active_borrows = [borrow for borrow in borrows if borrow[6] == b'0']
            current_borrows = [borrow for borrow in active_borrows if borrow[5] == b'B']
            returned_borrows = [borrow for borrow in active_borrows if borrow[5] == b'R']
            deleted_borrows = [borrow for borrow in borrows if borrow[6] == b'1']
            
            report_content.append("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
            report_content.append("-" * 40)
            report_content.append("‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠:")
            report_content.append(f"  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active): {len(active_books)} ‡πÄ‡∏•‡πà‡∏°")
            report_content.append(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á: {len(available_books)} ‡πÄ‡∏•‡πà‡∏°")
            report_content.append(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°: {len(borrowed_books)} ‡πÄ‡∏•‡πà‡∏°")
            report_content.append(f"  - ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (Deleted): {len(deleted_books)} ‡πÄ‡∏•‡πà‡∏°")
            
            report_content.append("\n‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:")
            report_content.append(f"  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active): {len(active_members)} ‡∏Ñ‡∏ô")
            report_content.append(f"  - ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (Deleted): {len(deleted_members)} ‡∏Ñ‡∏ô")
            
            report_content.append("\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°:")
            report_content.append(f"  - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Active): {len(active_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            report_content.append(f"  - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà: {len(current_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            report_content.append(f"  - ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {len(returned_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            report_content.append(f"  - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (Deleted): {len(deleted_borrows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
            report_content.append("\nüíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå")
            report_content.append("-" * 40)
            for filename, description in [
                (self.books_file, "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"),
                (self.members_file, "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"),
                (self.borrows_file, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")
            ]:
                if os.path.exists(filename):
                    file_size = os.path.getsize(filename)
                    report_content.append(f"  - ‡πÑ‡∏ü‡∏•‡πå{description} ({filename}): {file_size} bytes")
                else:
                    report_content.append(f"  - ‡πÑ‡∏ü‡∏•‡πå{description} ({filename}): ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
            if active_borrows:
                book_borrow_count = {}
                for borrow in active_borrows:
                    book_id = self._decode_string(borrow[1])
                    book_borrow_count[book_id] = book_borrow_count.get(book_id, 0) + 1
                
                if book_borrow_count:
                    sorted_books = sorted(book_borrow_count.items(), key=lambda x: x[1], reverse=True)
                    report_content.append("\nüèÜ ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å)")
                    report_content.append("-" * 40)
                    
                    for i, (book_id, count) in enumerate(sorted_books[:5], 1):
                        book = self._find_book_by_id(book_id)
                        if book:
                            title = self._decode_string(book[1])
                            report_content.append(f"  {i}. {title} - ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏° {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            
            # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if self.operation_history:
                report_content.append("\nüìù ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
                report_content.append("-" * 40)
                recent_operations = self.operation_history[-10:]  # 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                for operation in recent_operations:
                    report_content.append(f"  - {operation}")
            
            report_content.append("\n" + "=" * 80)
            report_content.append("‡∏à‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
            report_content.append("=" * 80)
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            with open(self.report_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(report_content))
            
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {self.report_file}")
            
            # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            show_report = input("‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ").strip().lower()
            if show_report == 'y':
                print("\n" + "\n".join(report_content))
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}")

    # === MAIN MENU ===
    def show_main_menu(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å"""
        print("\n" + "=" * 60)
        print("üèõÔ∏è  ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î (Library Management System)")
        print("=" * 60)
        print("1Ô∏è‚É£  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Books)")
        print("2Ô∏è‚É£  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Members)")
        print("3Ô∏è‚É£  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô (Borrow/Return)")
        print("4Ô∏è‚É£  ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ (Statistics)")
        print("5Ô∏è‚É£  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Generate Report)")
        print("0Ô∏è‚É£  ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (Exit)")
        print("-" * 60)

    def show_book_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        print("\nüìö ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
        print("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Add)")
        print("2. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (View)")
        print("3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Update)")
        print("4. ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Delete)")
        print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")

    def show_member_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        print("\nüë• ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        print("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Add)")
        print("2. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (View)")
        print("3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Update)")
        print("4. ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Delete)")
        print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")

    def show_borrow_menu(self):
        """‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô"""
        print("\nüìã ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô")
        print("1. ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Borrow)")
        print("2. ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (Return)")
        print("3. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (View Borrows)")
        print("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (Check Overdue)")
        print("5. ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (Delete Borrow)")
        print("0. ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")

    def run(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î")
        
        while True:
            try:
                self.show_main_menu()
                choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (0-5): ").strip()
                
                if choice == '1':
                    self._handle_book_menu()
                elif choice == '2':
                    self._handle_member_menu()
                elif choice == '3':
                    self._handle_borrow_menu()
                elif choice == '4':
                    self.view_statistics()
                elif choice == '5':
                    self.generate_report()
                elif choice == '0':
                    print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                    break
                else:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    
            except KeyboardInterrupt:
                print("\n\nüëã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                break
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def _handle_book_menu(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"""
        while True:
            self.show_book_menu()
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-4): ").strip()
            
            if choice == '1':
                self.add_book()
            elif choice == '2':
                self.view_books()
            elif choice == '3':
                self.update_book()
            elif choice == '4':
                self.delete_book()
            elif choice == '0':
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    def _handle_member_menu(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
        while True:
            self.show_member_menu()
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-4): ").strip()
            
            if choice == '1':
                self.add_member()
            elif choice == '2':
                self.view_members()
            elif choice == '3':
                self.update_member()
            elif choice == '4':
                self.delete_member()
            elif choice == '0':
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    def _handle_borrow_menu(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô"""
        while True:
            self.show_borrow_menu()
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-5): ").strip()
            
            if choice == '1':
                self.add_borrow()
            elif choice == '2':
                self.return_book()
            elif choice == '3':
                self.view_borrows()
            elif choice == '4':
                self.check_overdue_books()
            elif choice == '5':
                self.delete_borrow()
            elif choice == '0':
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        library = LibrarySystem()
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        library.run()
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á: {e}")
    finally:
        print("üîö ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")


# === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ===
if __name__ == "__main__":
    main()